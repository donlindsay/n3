* org-n3-functions
  rdf, owl2 and n3 support for org-mode
** startup 
#+startup:  overview hideblocks
*** drawers
#+drawer:   hidden state properties owl2-rdfs org-n3 n3
*** tags 
#+tags:     { @file @buffer @window @frame } 
#+tags:     { @doc @src @lob } 
#+tags:     { @import @export @org-n3 }
#+tags:     org elisp n3 owl2 rdfs shell axiom
*** header-args
#+property: header-args         :export results
#+property: header-args:org-n3  :session *org-n3*
*** properties 
    :properties:
    :see-also org-property-allowed-value-functions
    :end:
**** TODO do i want a #+property: list of all owl2 and rdfs? 
***** or elisp via org-global-properties 

      "List of property/value pairs that can be inherited by any entry.
      This list will be combined with the constant
      `org-global-properties-fixed'.  The entries in this list are cons
      cells where the car is a property name and cdr is a string with the
      value."
  
***** org-global-properties format

   '(("org-n3-triple-part" . "subject predicate object"))


#+BEGIN_EXAMPLE owl2-rdfs property drawer
  :owl2-rdfs:
  :doc-string "owl2 and rdfs markup element drawer"
  :type drawer
  :end:

#+END_EXAMPLE

#+property: org-n3_all          org-n3-rdfs-type
#+property: org-n3+             org-n3-predicate
#+property: org-n3-predicate    rdfs-type

***** or elisp via org-file-properties
      
      "You can set buffer-local values for the same purpose in the variable
      `org-file-properties' this by adding lines like
    
      #+PROPERTY: NAME VALUE"

*** calls 
   "#+call [<inside header arguments>] (<arguments>) <end header arguments>"
#+call: org-n3-imenu-add-to-menubar
#+call: org-n3-button-panel
#+call: org-n3-ac-predictive
#+call: factorial(n=5)
#+call: factorial[:session special](n=5)
#+call: org-n3-todo-keywords (<arguments>)

* features 
** property and tag support for n3 (owl2/rdf)
** import n3/ttl files to org
** export org to n3/ttl
* utilities 							      :shell:
** cwm
** raptor 
*** functions 
**** this is a start 
#+NAME: raptor
#+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both
       rapper -i turtle -o ntriples $filename
#+END_SRC
*** man raptor
**** Raptor RDF Syntax Library - Raptor RDF parser utility	 :rdf:raptor:
***** NAME
      rapper − Raptor RDF parsing and serializing utility

***** SYNOPSIS
      rapper [OPTIONS] INPUT-URI [INPUT-BASE-URI]

***** EXAMPLE
      rapper -o ntriples http://planetrdf.com/guide/rss.rdf
      rapper -i rss-tag-soup -o rss-1.0 pile-of-rss.xml
	   http://example.org/base/ 
      rapper --count http://example.org/index.rdf

***** DESCRIPTION
      The rapper utility allows parsing of RDF content by the
      Raptor RDF parser toolkit emitting the results as RDF
      triples in a choice of syntaxes. The INPUT-URI can be a
      file name, ’-’ for standard input or if Raptor is built
      with a WWW retrieval library, a general URI. The optional
      INPUT-BASE-URI is used as the document parser base URI if
      present otherwise defaults to the INPUT-URI. A value of
      ’-’ means no base URI.

***** OPTIONS
      rapper uses the usual GNU command line syntax, with long
      options starting with two dashes (’-’) if supported by
      the getopt_long function. Otherwise the short options are
      only available.

      −h, −−help

      Show a summary of the options.

      −i, −−input FORMAT

      Set the input FORMAT to one of ’rdfxml’ (RDF/XML,
      default), ’ntriples’ (N-Triples, see below), ’turtle’
      (Turtle, see below) or ’rss-tag-soup’ (RSS Tag Soup). The
      RSS Tag Soup parser can turn the many XML RSS formats and
      Atom 0.3 into RDF triples.

      The list of parsers depends on how libraptor(3) was
      built. The list of supported parsers is given in the help
      summary given by −h.

      −I, −−input-uri URI

      Set the input/parser base URI or use value ’-’ for no
      base. The default is the INPUT-URI argument value.

      −o, −−output FORMAT

      Set the output FORMAT to ’ntriples’ (N-Triples, default),
      ’rdfxml’ (RDF/XML), ’rdfxml-abbrev’ (RDF/XML with
      abbreviations) or ’rss-1.0’ (RSS 1.0, also an RDF/XML
      syntax).

      The list of serializers depends on how libraptor(3) was
      built. The list of supported serializers is given in the
      help summary given by −h.

      −O, −−output-uri URI

      Set the output/serializer base URI or use value ’-’ for
      no base. The default is the input base uri, either set by
      the argument INPUT-BASE-URI or via options −I,
      −−input-uri URI

      −c, −−count

      Only count the triples and produce no other output.

      −e, −−ignore-errors

      Ignore errors, do not emit the messages and try to
      continue parsing.

      −f, −−feature FEATURE[=VALUE]

      Set a parser or serializer feature FEATURE to a value, or
      to 1 if VALUE is omitted, Use −f help to get lists of
      valid parser and serializer features.

      If the form −f ’xmlns:prefix="uri"’ is used, the prefix
      and namespace uri given will be set for serializing. The
      syntax matches XML in that either or both of prefix or
      uri can be omitted.

      −g, −−guess

      Guess the parser to use from the source-URI rather than
      use the −i FORMAT.

      −q, −−quiet

      No extra information messages.

      −r, −−replace-newlines

      Replace newlines in multi-line literals with spaces.

      −−show-graphs

      Print graph names (URIs) as they are seen in the input. This only has
      a meaning for parsers that support graph names such as the TRiG
      parser.

      −−show-namespaces

      Print namespaces as they are seen in the input.

      −t, −−trace

      Print URIs retrieved during parsing. Especially useful
      for monitoring what the guess and GRDDL parsers are
      doing.

      −w, −−ignore-warnings

      Ignore warnings, do not emit the messages.

      −v, −−version

      Print the raptor version and exit.  

***** EXAMPLES

      rapper -q -i ntriples -o rdfxml 
      -f ’xmlns:rss="http://purl.org/rss/1.0/"’ 
      -f ’xmlns:ex="http://example.org/"’ 
	 tests/test.nt

      rapper -q -o rdfxml 
      -f ’xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"’ 
	 tests/rdf-schema.rdf 
	 ’http://www.w3.org/2000/01/rdf-schema#’

***** Examples
     rapper -q -i ntriples -o rdfxml 
	    -f ’xmlns:rss="http://purl.org/rss/1.0/"’
	    -f ’xmlns:ex="http://example.org/"’ tests/test.nt

     rapper -q -o rdfxml 
	    -f ’xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"’ tests/rdf-schema.rdf 
	       ’http://www.w3.org/2000/01/rdf-schema#’

#+begin_src elisp
(defun rapper)
(interactive)
(shell-command rapper)
(insert results at point)
(append-results-to-buffer-or-file)
#+end_src
* functions								 :fn:
** org-n3-org-ac
#+name: org-n3-org-ac
#+BEGIN_SRC emacs-lisp
  (defun org-n3-ac-predictive ()
    "Enable org-ac and predictive mode. Warning: resource intensive."
    (interactive)
    (progn
      (predictive-mode)             
      (org-ac/setup-current-buffer))
    )
#+END_SRC

** org-n3-todo
#+name:     org-n3-todo-keywords
#+headers:  :var data1=1
#+begin_src emacs-lisp          :var data2=2
(progn 
;; buttonize
(org-babel-execute-src-block)

(setq org-todo-keywords
       '((sequence "TODO" "|" "DONE")
         (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
         (sequence "|" "CANCELED")))

(message "data1:%S, data2:%S" data1 data2))
#+end_src
#+results:
: data1:1, data2:2

#+name: named-block
#+header: :var data=2
#+begin_src emacs-lisp
(message "data:%S" data)
#+end_src
#+results: named-block
: data:2

** org-n3-button-panel
   :properties:
   :doc-string  "A panel window with a set of custom buttons for common tasks."
   :import      buffer-buttons.el
   :end:

   Buffer buttons placed at the bottom or top of this file. So that
   they can be used in a two window frame, when the buttons are ready,
   code the frame window geometry setup. See buffer-buttons.el for more.

   Another feature is inline buttons for source blocks. Buttons
   provide quick access to executions and editing functions. Source
   blocks, like repls, with buttons.

*** org-n3-button-definitions
#+name: org-n3-button-definitions
#+BEGIN_SRC emacs-lisp
  ; eval-last-sexp
  (define-buffer-button (elisp-eval b
                                    :label "<- Eval"
                                    :prefix ";;")
    (save-excursion
      (goto-char (button-start b))
      (eval-last-sexp nil)))
  ; org-edit-src-code
  (define-buffer-button (elisp-eval b
                                    :label "Edit Src"
                                    :prefix ";;")
    (save-excursion
      (goto-char (button-start b))
      (org-edit-src-code nil)))
  ; org-execute-source-block
  (define-buffer-button (elisp-eval b
                                    :label "Exec Src"
                                    :prefix ";;")
    (save-excursion
      (goto-char (button-start b))
      (org-execute-source-block nil)))
#+end_src

***  define the buttons in source blocks

** org-n3-yas 
#+name: yasnippet-functions
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
                      (lambda ()
                        (org-set-local 'yas/trigger-key [tab])
                        (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
  


 (add-hook 'org-mode-hook
                      (lambda ()
                        (make-variable-buffer-local 'yas/trigger-key)
                        (setq yas/trigger-key [tab])
                        (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                        (define-key yas/keymap [tab]
                      'yas/next-field)))

(defun yas/org-very-safe-expand ()
              (let ((yas/fallback-behavior 'return-nil))
              (yas/expand)))

#+END_SRC
** org-n3-imenu
** org-n3-predictive-mode
** org-n3-lob-ingest
 :properties:
 :org-n3-lob-file ~/src/lisp/org-n3/org-n3-library-of-babel.org
 :end:

#+name: org-n3-lob-ingest
#+BEGIN_SRC emacs-lisp
; (org-babel-lob-ingest)

#+END_SRC
** introduce org-babel to =xml= and =n3=

#+begin_src emacs-lisp :results silent
  (add-to-list 'org-babel-interpreters "xml")
  (add-to-list 'org-babel-interpreters "n3")
  (add-to-list 'org-babel-tangle-langs '("xml" "xml"))
  (add-to-list 'org-babel-tangle-langs '("n3" "n3"))
#+end_src

#+begin_src xml :tangle example
  <first>
  </first>
#+end_src

#+begin_src n3 :tangle example
  n3 stuff
#+end_src

*** ex: cl-org-parser ebnf-ish

#+BEGIN_EXAMPLE
org                    := ( :org org-header org-section org-entry* )
org-header             := ( :header org-option* )
org-entry              := ( :entry org-headline org-section org-entry* )
org-headline           := ( :stars <integer> org-entry-title org-headline-tag* [ org-entry-tags ] )
org-entry-title        := :title <string>
org-headline-tag       := :commented t
                        | :quoted t
                        | :todo <keyword>
                        | :priority <string>
org-entry-tags         := :tags ( <string>* )
org-section            := ( :section org-section-component* )
org-section-component  := org-element
                        | org-greater-element
                        | org-affiliated-keyword
org-element            := <string>
org-greater-element    := org-greater-block
                        | org-dynamic-block
                        | org-drawer
org-greater-block      := ( :block         <string> [ :parameters <string> ] :contents org-section )
org-dynamic-block      := ( :dynamic-block <string> [ :parameters <string> ] :contents org-section )
org-drawer             := org-basic-drawer
                        | org-property-drawer
org-basic-drawer       := ( :basic-drawer    <string> :contents org-section )
org-property-drawer    := ( :property-drawer <string> :contents ( org-property* ) )
org-property           := ( :property <string> :value <string> )
org-affiliated-keyword := org-keyword
                        | org-attribute
org-keyword            := ( :keyword   <string> [ :optional <string> ] :value <string> )
org-attribute          := ( :attribute <string> [ :optional <string> ] :value <string> )
#+END_EXAMPLE
** org-n3-lob-file
** do i want a #+property: list of all owl2 and rdfs? 
#+property: org-n3_all          org-n3-rdfs-type
#+property: org-n3+             org-n3-predicate
#+property: org-n3-predicate    rdfs-type
